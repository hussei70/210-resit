#should provide garabe collection first
import gc 

class Node(object):
      def __init__(self, value):
          self.value=value
          self.next=None
          self.prev=None

class List(object):
      def __init__(self):
          self.head=None
          self.tail=None
      def insert(self,n,x):
          #Not actually perfect: how do we prepend to an existing list?
          if n!=None:
              x.next=n.next
              n.next=x
              x.prev=n
              if x.next!=None:
                  x.next.prev=x              
          if self.head==None:
              self.head=self.tail=x
              x.prev=x.next=None
          elif self.tail==n:
              self.tail=x
      def display(self):
          values=[]
          n=self.head
          while n!=None:
              values.append(str(n.value))
              n=n.next
          print "List: ",",".join(values)
          
          
          
      def nodeDel(self, delete):
        if self.head is None or delete is None: 
            return 
        if self.head == delete: 
            self.head = delete.next

        if delete.next is not None: 
            delete.next.prev = delete.prev 

        if delete.prev is not None: 
            delete.prev.next = delete.next
            
        # Calling the garbage collector 
        gc.collect() 
        
      def printMiddle(self): 
        slow_ptr = self.head 
        fast_ptr = self.head 
  
        if self.head is not None: 
            while (fast_ptr is not None and fast_ptr.next is not None): 
                fast_ptr = fast_ptr.next.next
                slow_ptr = slow_ptr.next
            print "Middle element: ", slow_ptr.value
        
 
            
          
if __name__ == '__main__':
      l=List()
      l.insert(None, Node(4))
      l.insert(l.head,Node(6))
      l.insert(l.head,Node(8))
      l.display()
      
      
      l.nodeDel(l.head) 
      print "List after deletion: ", 
      l.display() 
      
      l.printMiddle()
      

    

      
